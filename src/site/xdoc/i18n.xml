<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	This is free and unencumbered software released into the public domain.
	
	Anyone is free to copy, modify, publish, use, compile, sell, or
	distribute this software, either in source code form or as a compiled
	binary, for any purpose, commercial or non-commercial, and by any
	means.
	
	In jurisdictions that recognize copyright laws, the author or authors
	of this software dedicate any and all copyright interest in the
	software to the public domain. We make this dedication for the benefit
	of the public at large and to the detriment of our heirs and
	successors. We intend this dedication to be an overt act of
	relinquishment in perpetuity of all present and future rights to this
	software under copyright law.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	
	For more information, please refer to <http://unlicense.org/>
 -->
<document>
	<properties>
		<title>Usage - i18n Helpers</title>
	</properties>
	<body>
		<section name="What/Why?">
			<dl>
				<dt>What is the motivation for these features?</dt>
				<dd>Developers should avoid hard-coding any copy type of text. 
					Even seasoned CQ developers occasionally end up using 
					ValueMap defaults as hard-coded values (e.g. 
					<b>&lt;%=properties.get("signUp", "Sign-Up")%&gt;</b>).
					This makes for a fragile solution in multi-lingual sites. 
					<a href="http://sling.apache.org/documentation/bundles/internationalization-support-i18n.html" target="_blank">sling internationalization support</a> 
					provides a great way to establish Locale specific copy as
					via ResourceBundles -- a common Java concept. Moreover, these
					messages can be managed as content on a running CQ instance 
					(<a href="http://localhost:4502/libs/cq/i18n/translator.html" target="_blank">http://host:port/libs/cq/i18n/translator.html</a>)
					which could prevent unnecessary patch deployments when 
					default copy is not authorable on a component. Overall, the
					design goal of these features are to establish a 
					development pattern and reduce necessary boilerplate.</dd>
				
				<dt>What does this provide that isn't out-of-box?</dt>
				<dd>&lt;cq:setContentBundle&gt; provides access to a large set 
				    of sling:MessageEntry values for a given Locale. Narrowing
				    to a sling:basename qualified set of sling:MessageEntry
				    key-value/message-pairs is easier to debug. Additionally,
				    checking the current resource/node for properties of the
				    same name provides a reasonable short circuit.</dd>
				
				<dt>What are some limitations?</dt>
				<dd>This pattern presumes defaults are shared across all
					instances of a common sling:resourceType (i.e. all
					instances of a particular component). The fallback
					mechanism must coerce String[] to single valued and
					this could look ugly/unexpected. Lastly, the current
					node property lookup does not support inheritance (i.e. 
					<a href="http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/commons/inherit/InheritanceValueMap.html" target="_blank">InheritanceValueMap#getInherited</a>).</dd>
					
				<dt>Where are the tests?</dt>
				<dd>Working on it...</dd>
			</dl>
		</section>
		<section name="&lt;isi:i18nHelper/&gt;">
			<p>
				The i18n functionality should be used with the tag
				&lt;isi:i18nHelper/&gt;.
				This provides some conveniences and a thin wrapper around
				<a href="http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/i18n/I18n.html"
					target="_blank">i18n translation helper</a>.
				More importantly, the below features is intended to establish useful patterns for
				internationalized text and make good use of
				<a href="http://sling.apache.org/documentation/bundles/internationalization-support-i18n.html"
					target="_blank">sling internationalization support</a>.
				Usage is predicated on the taglib declaration found in
				/apps/ironsites/common/global.jsp.
			</p>
			<p>
				Assuming the i18nHelper tag is established at the top of a JSP, the i18n helper tag will allow a
				ValueMap variable "messages" to be accessible in scriptlets and EL expressions. This ValueMap will contain
				local component/resource property values coerced to String. This is not very different from accessing
				a property via the "properties" ValueMap provided out-of-box.
				<br/>
				<h4>/apps/ironsites/components/cachemonitor/cachemonitor.jsp</h4>
				<source>
					<![CDATA[
						...
<dt>${messages.hitCount}</dt> <dd><%=stats.hitCount()%></dd>
						...
					]]>
				</source>
				<br/>
				Where this differs depends on whether or not the developer has created sling:MessageEntry nodes for
				a given Locale and component definition. i18nHelper will build the "messages" ValueMap to fall back upon
				sling:MessageEntry values given the current node resourceType as the <a href="http://sling.apache.org/documentation/bundles/internationalization-support-i18n.html">sling:basename</a>.
				<h4>/apps/ironsites/components/cachemonitor/i18n/en/.content.xml</h4>
				<source>
					<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0"
    jcr:primaryType="sling:Folder"
    jcr:language="en"
    jcr:title="English"
    jcr:mixinTypes="[mix:language]"
    sling:basename="[ironsites/components/cachemonitor]"/>
					]]>
				</source>
				<br/>
				This allows the i18nHelper tag to determine which mix:language 
				sling:MessageEntry nodes to populate. If no local node property 
				exists, the "messages" variable can then fallback on using the 
				value found for sling:message for a matching sling:key.
				<h4>/apps/ironsites/components/cachemonitor/i18n/en/evictionCount/.content.xml</h4>
				<source>
					<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0"
    jcr:primaryType="sling:MessageEntry"
    sling:key="evictionCount"
    sling:message="Eviction Count"/>
					]]>
				</source>
				<br/>
				The tag allows 'messages' ValueMap is available as a JSP 
				variable as well as an object in PageContext for use in JSTL EL. 
				All of the below are equivalent if either a 'hitCount' property
				is has a value on the current node, or if there is a
				sling:MessageEntry with sling:key "hitCount" under the appropriate
				locale mix:language node featuring a sling:basename matching
				the current node/resource sling:resourceType value.
				The last example below would provide a default in the absence
				of both node property and sling:MessageEntry fallback.
				<source>
					<![CDATA[
						...
<dt>${messages.hitCount}</dt> <dd><%=stats.hitCount()%></dd>
						...
<dt><%=messages.get("hitCount")%></dt> <dd><%=stats.hitCount()%></dd>
						...
<dt><%=messages.get("hitCount", "Hit Count")%></dt> <dd><%=stats.hitCount()%></dd>
						...
					]]>
				</source>
			</p>
		</section>
		<section name="I18n - Translation Helper">
			<p>
				The <a href="http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/i18n/I18n.html"
					target="_blank">i18n translation helper</a>.
				is an out-of-box capability which is provides syntax around 
				sling:MessageEntry nodes as well. ironsites populates an
				instance of I18n with a custom ResourceBundle which provides
				the fallback behavior described above based on sling:basename.
				i18nHelper tag also creates a variable and PageContext object
				called "i18n" which is an instance of this class. 
			</p>
			<p>A developer may wonder when it would be more idiomatic to use 
				this instance in place of the above "messages" construct. In
				my opinion, the ValueMap is more convenient. But I18n <i>does</i>
				reduce boilerplate when interpolating Strings via MessageFormat.
				<a href="http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/i18n/I18n.html#get(java.lang.String, java.lang.String, java.lang.Object...)" target="_blank">MessageFormat tokens</a>
				are going to be common in a multi-lingual site where sentence 
				structure could vary and ordering is important.
				<blockquote style="padding: 1em; border: 1px solid black; color: gray">Click on {0} chat with {1}</blockquote>
				<blockquote style="padding: 1em; border: 1px solid black; color: gray">{1}와 함께 {0}채팅을 클릭합니다</blockquote>
				In the above {0} might represent a call-to-action and {1} would
				represent a name. But the language structure requires a
				different order for the value in these tokens which is important
				to programmatically populate correctly. String concatenation
				won't work well in this case and would make for an annoying
				authoring experience in a component dialog.
			</p>
			<p>
				Out-of-box CQ code that has similar needs to internationalize
				copy in ExtJS and granite UI elements also rely on interpolating 
				tokens in this manner. I18n does provide a convenient way to 
				pass in values to fill-in tokens into varargs parameters of
				it's overloaded accessor. i18nHelper tag creates an 
				instance of I18n (JSP variable &amp; EL accessible PageContext
				object) which contains the ResourceBundle with local node 
				properties and sling:basename/resourceType fallbacks. Although,
				for most cases, the JSP variable will be used via scriptlet.
				This goes without saying, but the index order of the String
				values passed should correspond to the numbering of the 
				<i>{idx}</i> tokens found in the message.
				<br/>
				In the below example, it is worth mentioning that markup in a 
				sling:message should be properly escaped in its docview XML
				representation of a sling:MessageEntry node.
				<source>
					<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0"
    jcr:primaryType="sling:MessageEntry"
    sling:key="header"
    sling:message="Welcome to &lt;a href=&quot;{0}&quot;&gt;{1}&lt;a&gt;"/>
					]]>
				</source>
				<source>
					<![CDATA[
<h2><%=i18n.get("header", null, WCMUtil.getSafePath(root.getPath()), WCMUtil.getPageTitle(root))%></h2>
					]]>
				</source>
			</p>
			<p>
				One could easily argue that asking authors to provide 
				{0} {1} {n..} is negatively impact authoring experience.
				This feature does not provide a solution to this, but in  my
				experience, this is easily remedied on a case-by-case basis
				with a descriptive <i>fieldDescription</i> in your dialog
				as well as judicious use of String#replaceAll -- for example,
				authors could be instructed to provide <b>{firstName}</b> and 
				<b>{lastName}</b> and the implementer can replace all instances
				of these tokens with their respective {idx} in the dialog 
				property and/or sling:message values.
			</p>
		</section>
	</body>
</document>